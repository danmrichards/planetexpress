// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"sync"
)

var (
	lockEventServiceMockPackageAllocate sync.RWMutex
)

// Ensure, that EventServiceMock does implement EventService.
// If this is not the case, regenerate this file with moq.
var _ EventService = &EventServiceMock{}

// EventServiceMock is a mock implementation of EventService.
//
//     func TestSomethingThatUsesEventService(t *testing.T) {
//
//         // make and configure a mocked EventService
//         mockedEventService := &EventServiceMock{
//             PackageAllocateFunc: func(ctx context.Context, id string, size int) error {
// 	               panic("mock out the PackageAllocate method")
//             },
//         }
//
//         // use mockedEventService in code that requires EventService
//         // and then make assertions.
//
//     }
type EventServiceMock struct {
	// PackageAllocateFunc mocks the PackageAllocate method.
	PackageAllocateFunc func(ctx context.Context, id string, size int) error

	// calls tracks calls to the methods.
	calls struct {
		// PackageAllocate holds details about calls to the PackageAllocate method.
		PackageAllocate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Size is the size argument value.
			Size int
		}
	}
}

// PackageAllocate calls PackageAllocateFunc.
func (mock *EventServiceMock) PackageAllocate(ctx context.Context, id string, size int) error {
	if mock.PackageAllocateFunc == nil {
		panic("EventServiceMock.PackageAllocateFunc: method is nil but EventService.PackageAllocate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   string
		Size int
	}{
		Ctx:  ctx,
		ID:   id,
		Size: size,
	}
	lockEventServiceMockPackageAllocate.Lock()
	mock.calls.PackageAllocate = append(mock.calls.PackageAllocate, callInfo)
	lockEventServiceMockPackageAllocate.Unlock()
	return mock.PackageAllocateFunc(ctx, id, size)
}

// PackageAllocateCalls gets all the calls that were made to PackageAllocate.
// Check the length with:
//     len(mockedEventService.PackageAllocateCalls())
func (mock *EventServiceMock) PackageAllocateCalls() []struct {
	Ctx  context.Context
	ID   string
	Size int
} {
	var calls []struct {
		Ctx  context.Context
		ID   string
		Size int
	}
	lockEventServiceMockPackageAllocate.RLock()
	calls = mock.calls.PackageAllocate
	lockEventServiceMockPackageAllocate.RUnlock()
	return calls
}
