// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY727bNhB/lQM3YF8UW26TotO3rA3QAEEbNMmnJhho6mSzlUiWpIKmgYG9xl5vTzIc",
	"KcmSrDReEbTYp8i2eH9+9/vdHXPPhK6MVqi8Y9k9s+iMVg7Dh+Oy1IJ7POfiE18hfSW08qg8PXJjSim4",
	"l1rNPzqt6Dv8witTxtPN88GCPtzysg4Gcu45/ZU5y9jvR4uXBS8OD9IXL/BgsUBxsCwO+UGaLo6OciHy",
	"5csFS5iTX5Fli3Sz2WwS5sQaq2DDWG3Qehn9tZZ/tViwjP0y32Y2j2fcvM0ob1Mig/7OIMuYXn5E4Vnw",
	"kaMTVhrKjWXsco1g0dWlB10AjzakWgEHE+2AVODXCG4tDQhuVxqW/I5tEnZirbbvG1SfBEEki45lH+5H",
	"YV4pviwRvIZS87wNLQGpXF0UUkhUHgQ3XEh/R7B67mvHMnaUpixhXvqScHil6zIHpf3ADNvcfBP9Nqp7",
	"Jj1W7rFCBFjYFnxuLeG1TzVOIirQUpWsXKyluWjSeUKS8pYuLHuWJozfclkSxix7niasgzJbpGnCCC16",
	"8+gJeEr57M/NWEjiZsvB31yfhV0wA1XnPVnzsnxXBEp9K6pONMk4p4Ykf5Kqd2kpP9cIp6+h0DZE2MHa",
	"katL1Hkr1Woq9Ztx5u/RWHQUYE+HW9PTikzaiodkv6sJ3bSq3k21H5KCIImRxx+r2GRMvb73cTDHsK4r",
	"rg4s8jyEhV9MyVXQDjiDQhZSUKx+LR1oIWprUQlseWesXpZYzeBMfkIIsSXx3UJimf/z198OgsJAcAVL",
	"BKpUKb9iPtut/zbX+wnCv7m8PG9ZL3SO0Mi8ATM4bcJJKA2LzmEOnJgSPcRIJh03qO7C49ba+mSMkqur",
	"itu7EQrg19zDxZt3V2ev4e27SxBrrlYIhdVVHzuvH0aSQhdofNCNqa3RDoPKG+BCZWbT2mmYcdJQcKSl",
	"hPW0v4eqvI71ogYHWgWIo7RG9N6KZEy9+MtUMemXLvPtOG0fayW926YglccV2pClxc+1tNRzP0T7N9vM",
	"z8edZZt7aK7fSpwiiTXxgWXYb629zjqD47KM7HbALY2kxkbsP4MUZiOovne27CDbMzQFL690rfqLC+YJ",
	"LGsPtYpWk0ehHkQ36aP9GZzhAiNho1GXQI4ebSUV5rC8Czh67XnZNbakZRZX+e5smA5oi89UPEP7bfX6",
	"U2DXYgvxlD1VV0u0UXoh0j3I2RLxIqpkYpBLVegpf9KBjCQ8Pj/thuZ5yRV6OIndrIuAKGmooTm0t1Lg",
	"DE49NZBbmaMDVLnRMnKad99DUStB7nhJ8HgN1OgTqLgKM5TKoHh553DgpiJxzK7VtboMaA7RDYOWjvqe",
	"ptsa7qiDO8Ku0LaCazZA85rNeqNtmDVL2C1aF4FazFKqmzaouJEsY89n6YzGouF+HZQxbwzPW1KFVUU7",
	"P9Hdmzci7it5iyP5tvtER6KQq0VfW0Wtsn5oyyH7IUobnk/zbXNqnbLYytD5P3R+9yQbbO/K1N9E99ru",
	"HlgyhyUl1nSwhl7cuzg+SxcPeevem49vl5uEHaaHj58b3qg2SViG/uspQiUO7l7xoX8r7Mhzv11uN3PS",
	"f1x4La+or01dxE5fj+dZs+ExEj3LAkNZwhSvMHzqluf+TPO2xn7txlOeBkE9QeUzzfP+8B7P60kqnsXo",
	"RlU83LX+VsOrhpw/r2AU7R7FihPu+8rVnP0RBbsKrvolC1viYyW7aiP8nxQtxjssG+U33276K/RTi1ns",
	"seOtbHjjHUz3IV69fw7sgLVHTr3jPw88CqLJOjZoGvctnWtbsoytvTfZfB4uB2vtfPY8TVO2udn8GwAA",
	"//+nW4JE5BMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
