// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY3W7bNhR+lQNuwG4UW26TotNd1gZogKANmuSqCQZaOrLZSqRKUkbdwMBeY6+3JxkO",
	"KcnUT5o0C1rsKrItnp/v+84Pc8tSVVZKorSGJbdMo6mUNOg+HBeFSrnFc55+4iukr1IlLUpLj7yqCpFy",
	"K5ScfzRK0nf4hZdV4U83zwcL+rDhRe0MZNxy+isylrDfjxYvc54fHsQvXuDBYoHpwTI/5AdxvDg6ytI0",
	"W75csIgZ8RVZsoh3u90uYiZdY+lsVFpVqK3w/lrLv2rMWcJ+me8zm/szZt5mlLUpkUGNn2uhMWPJB2/k",
	"JmJ2WyFLmFp+xNQy5zdDk2pRUb4sYZdrBI2mLiyoHLi3K+QKOFTeNggJdo1g1qKClOuVgiXfsl3ETrRW",
	"+n2D9JOgimTRsOTD7SDMK8mXBYJVUCietaFFIKSp81ykAqWFlFc8FXZLUFtua8MSdhTHLGJW2IJweKXq",
	"IgOpbM8M2918k5E2qlsmLJbmPnIcLIRPAz7XmvAaMNQYfQhHJx4raEVNti/WorpoknxCOfNWWCx5FkeM",
	"b7goCHmWPI8j1gGcLOI4YoQhvXn0BIqmfP6bij3lpOJWrb+ZUK9dgL2ekAVNgRfFu9yJ71uRdiUXDfNs",
	"5PQn9YSxgMXnGuH0NeRKuwg7qDsZdokaq4VcjeAI7I9BuRli8h4rjYZCD2p573S6qqNWHw6GRzW3m7Yz",
	"jEEIQ5LgKmDg8cdWfTQUauh9GMwxrOuSywONPHNh4Zeq4NJVGpgKU5GLlGK1a2FApWmtNcoUW0VWWi0L",
	"LGdwJj4huNgi/24usMj++etvA64eIeUSlgjEVCG+YjYbK2Of6+1EKby5vDxv6yFVGULTFBowndMmnIjS",
	"0GgMZsBJKd6Dj2TScYPqGB6zVtpGQ5RMXZZcbwcogF1zCxdv3l2dvYa37y4hXXO5Qsi1KkPsrLobSQo9",
	"xcq6iqpqXSmDrv4b4Bwzs3urqgGyTaxfRjd7FZ00ch3UXcSCDvKACrTKc0utE5R0dPgyHJTCvqCGMvW/",
	"TBFPv3Qo7cd3+1hLYc0+BSEtrlCPESH7Qebnw/60z9217W8lTpF4/qxTJIYNOujPMzguCl8JBrimYdfY",
	"8L2ql8JsANVjp9YI2cDQFLy8VLUMFyXMIljWFmrprUb3Qt2LbtJH+zOYiqfoxe2NmggytKhLITGD5dbh",
	"aJXlRdcEo1ZZXGbjCTMd0B6fqXj69lv2wokxtthCPGVP1uUStS9TF+l3ijNo942bKKAthDdQ8IUvr4k9",
	"QshcTQUqDAiv3uPz025mnxdcooUT3zK70EnLFXVNg3ojUpzBqaUutREZGkCZVUr4YuDd95DXMiV3vCBc",
	"rQKaJhGUXLpBTfxJXmwN9tyUVFWza3ktLx0NfVrcNKejNmgGLfmjsuKGQM+VLuGa9Wi4ZrNgfvazZhHb",
	"oDYeqMUsJsJVhZJXgiXs+Sye0eytuF27kppvFvPG9rzlyS1LytiJKdK84aFfiQ0OSr/dWzoBunQ12lpL",
	"arP1XXsW2XeBavd8mu0bW+uUeaWhsX+obPske3Vw5Qv34wftl3esuX1WSTgdrK5Ugovvs3hxl7fuvfnw",
	"dryL2GF8eP+5/u1vF7ml63tPESp+QQjIh/BWG+rndr8B7+ZU/X7r1ryktjh1bzx9PRyHzTLJqPRZ4nTK",
	"IiZ5ie5Tt2GHXcfqGkP6hgsFzZF6Qs1nimfh7B+O+0k1nvnoBkQejq2/VfCq0efP44yifRhffkY+jrHm",
	"7I/g7Mq5CllzO+l9rF21Ef5PePPxjpijFOf7q8UK7dR255vtcLXrX757K0IfsuB/FyO8HpBWcPzn4UdB",
	"NFlTp979GwAA//89WWLigRQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
